# Generated by Django 4.2.21 on 2025-06-21 09:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brands',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'brands',
            },
        ),
        migrations.CreateModel(
            name='Platforms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
            ],
            options={
                'db_table': 'platforms',
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_0', models.CharField(blank=True, db_column='platform', max_length=50, null=True)),
                ('raw_text', models.TextField()),
                ('cleaned_text', models.TextField()),
                ('user_id', models.TextField(blank=True, null=True)),
                ('original_post_url', models.TextField(blank=True, null=True)),
                ('posted_at', models.DateTimeField(blank=True, null=True)),
                ('language', models.CharField(blank=True, max_length=50, null=True)),
                ('reach_estimate', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('like_count', models.IntegerField(blank=True, null=True)),
                ('view_count', models.IntegerField(blank=True, null=True)),
                ('share_count', models.IntegerField(blank=True, null=True)),
                ('comment_count', models.IntegerField(blank=True, null=True)),
                ('followers_count', models.IntegerField(blank=True, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sentiment_analysis_app.brands')),
                ('platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sentiment_analysis_app.platforms')),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='TopHandles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.TextField(unique=True)),
                ('followers_count', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'top_handles',
            },
        ),
        migrations.CreateModel(
            name='SentimentResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentiment_label', models.TextField(blank=True, null=True)),
                ('sentiment_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sentiment', to='sentiment_analysis_app.posts')),
            ],
            options={
                'db_table': 'sentiment_results',
            },
        ),
        migrations.CreateModel(
            name='NamedEntities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_text', models.TextField(blank=True, null=True)),
                ('entity_label', models.TextField(blank=True, null=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sentiment_analysis_app.posts')),
            ],
            options={
                'db_table': 'named_entities',
            },
        ),
        migrations.CreateModel(
            name='BrandPlatformAggregates',
            fields=[
                ('brand', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sentiment_analysis_app.brands')),
                ('platform', models.CharField(max_length=50)),
                ('date', models.DateField()),
                ('positive_count', models.IntegerField(blank=True, null=True)),
                ('neutral_count', models.IntegerField(blank=True, null=True)),
                ('negative_count', models.IntegerField(blank=True, null=True)),
                ('total_reach', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'brand_platform_aggregates',
                'unique_together': {('brand', 'platform', 'date')},
            },
        ),
        migrations.CreateModel(
            name='BrandAggregates',
            fields=[
                ('brand', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sentiment_analysis_app.brands')),
                ('date', models.DateField()),
                ('positive_count', models.IntegerField(blank=True, null=True)),
                ('neutral_count', models.IntegerField(blank=True, null=True)),
                ('negative_count', models.IntegerField(blank=True, null=True)),
                ('total_reach', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'brand_aggregates',
                'unique_together': {('brand', 'date')},
            },
        ),
    ]
